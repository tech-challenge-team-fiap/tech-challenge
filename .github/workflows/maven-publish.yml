name: pipeline

on:
 push:
    branches: [ main ]
 pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
   
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
     
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=tech-challenge-team-fiap_tech-challenge

      # - name: Build and Deploy SAM
      #   env: 
      #     PROD_AWS_REGION: us-east-2
      #     SAM_TEMPLATE: template.yaml
      #     
  # deploy-prod:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - uses: actions/download-artifact@v3
  #       with:
  #          name: packaged-prod.yaml
    
  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true
    
  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${PROD_STACK_NAME} \
  #         --template packaged-prod.yaml \
  #         --capabilities CAPABILITY_IAM \
  #         --region ${PROD_REGION} \
  #         --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #         --no-fail-on-empty-changeset \
  #         --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
